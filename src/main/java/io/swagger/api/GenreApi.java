/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Genre;
import io.swagger.model.PublicationList;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-25T09:56:25.993Z[GMT]")
@Validated
@CrossOrigin
public interface GenreApi {

    @Operation(summary = "Add new genre to the genre list", description = "", tags={ "genre" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfuly added new Genre object", content = @Content(schema = @Schema(implementation = PublicationList.class))),
        
        @ApiResponse(responseCode = "409", description = "Genre name already taken") })
    @RequestMapping(value = "/genre",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Genre> addGenre(@Parameter(in = ParameterIn.HEADER, description = "User info to check genre addition rights" ,required=true,schema=@Schema()) @RequestHeader(value="user", required=true) String user, @Parameter(in = ParameterIn.DEFAULT, description = "Genre object that needs to be added to the genre list", required=true, schema=@Schema()) @Valid @RequestBody Genre body);


    @Operation(summary = "Delete genre", description = "", tags={ "genre" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully deleted Genre object"),
        
        @ApiResponse(responseCode = "403", description = "User does not have the rights to delete genre"),
        
        @ApiResponse(responseCode = "404", description = "Genre not found") })
    @RequestMapping(value = "/genre/{genreName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGenre(@Parameter(in = ParameterIn.PATH, description = "Name of the genre to delete", required=true, schema=@Schema()) @PathVariable("genreName") String genreName, @Parameter(in = ParameterIn.COOKIE, description = "User info to check genre deletion rights" ,schema=@Schema()) @CookieValue(value="user", required=false) User user);


    @Operation(summary = "Find all genres", description = "", tags={ "genre" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Genre.class)))) })
    @RequestMapping(value = "/genre/findAll",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Genre>> findAllGenres();


    @Operation(summary = "Update genre name", description = "", tags={ "genre" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully updated Genre object"),
        
        @ApiResponse(responseCode = "403", description = "User does not have the rights to modify Genre objects"),
        
        @ApiResponse(responseCode = "404", description = "Genre not found") })
    @RequestMapping(value = "/genre/{genreName}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Genre> updateGenre(@Parameter(in = ParameterIn.PATH, description = "Name of the genre to update", required=true, schema=@Schema()) @PathVariable("genreName") String genreName, @Parameter(in = ParameterIn.HEADER, description = "User info to check modification rights" ,required=true,schema=@Schema()) @RequestHeader(value="user", required=true) String user, @Parameter(in = ParameterIn.DEFAULT, description = "Genre object that needs to be updated", required=true, schema=@Schema()) @Valid @RequestBody Genre body);

}

