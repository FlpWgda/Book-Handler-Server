/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.PublicationList;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-25T09:56:25.993Z[GMT]")
@Validated
@CrossOrigin
public interface PublicationListApi {

    @Operation(summary = "Add a new publication list", description = "", tags={ "publicationList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfuly added new publicationList object", content = @Content(schema = @Schema(implementation = PublicationList.class))) })
    @RequestMapping(value = "/publicationList",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PublicationList> addPublicationList(@Parameter(in = ParameterIn.DEFAULT, description = "PublicationList object that needs to be added to the service", required=true, schema=@Schema()) @Valid @RequestBody PublicationList body);


    @Operation(summary = "Delete a publication list", description = "", tags={ "publicationList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "403", description = "User does not have the rights to delete this publication list"),
        
        @ApiResponse(responseCode = "404", description = "Publication list not found") })
    @RequestMapping(value = "/publicationList/{publicationListId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePublicationList(@Parameter(in = ParameterIn.PATH, description = "Publication list id to delete", required=true, schema=@Schema()) @PathVariable("publicationListId") Long publicationListId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="username", required=false) String username);


    @Operation(summary = "Find publication lists by user Id", description = "", tags={ "publicationList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = PublicationList.class)))),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/publicationList/findByUserId",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PublicationList>> findPublicationsListByUserId(@NotNull @Parameter(in = ParameterIn.QUERY, description = "User id to filter by" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String userId);


    @Operation(summary = "Find publication list by ID", description = "Returns a single publication", tags={ "publicationList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = PublicationList.class))),
        
        @ApiResponse(responseCode = "404", description = "Publication not found") })
    @RequestMapping(value = "/publicationList/{publicationListId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PublicationList> getPublicationListById(@Parameter(in = ParameterIn.PATH, description = "ID of publication list to return", required=true, schema=@Schema()) @PathVariable("publicationListId") Long publicationListId);


    @Operation(summary = "Update an existing publication list", description = "", tags={ "publicationList" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully updated publicationList object"),
        
        @ApiResponse(responseCode = "403", description = "User does not have the rights to alter this publication"),
        
        @ApiResponse(responseCode = "404", description = "Publication list not found") })
    @RequestMapping(value = "/publicationList",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePublicationList(@Parameter(in = ParameterIn.COOKIE, description = "User info to check modification rights" ,required=true,schema=@Schema()) @CookieValue(value="user", required=true) User user, @Parameter(in = ParameterIn.DEFAULT, description = "PublicationList object that needs to be updated", required=true, schema=@Schema()) @Valid @RequestBody PublicationList body);

}

